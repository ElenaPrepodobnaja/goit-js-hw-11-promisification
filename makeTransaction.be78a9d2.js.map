{"version":3,"sources":["makeTransaction.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","canProcess","Promise","resolve","reject","setTimeout","logSuccess","id","console","log","logError","warn","amount","then","catch"],"mappings":";AAAA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiChDK,EAAkB,SAACC,GACfC,IAAAA,EAAQR,EAA0B,IAAK,KACvCS,EAAaN,KAAKE,SAAW,GAG5B,OAFPE,EAAYC,MAAQA,EAEb,IAAIE,QAAQ,SAACC,EAASC,GACzBC,WAAW,WACHJ,GACAE,EAAQJ,GAERK,EAAOL,IACZC,MAILM,EAAa,SAAmB,GAAhBC,IAAAA,EAAAA,EAAAA,GAAIP,EAAAA,EAAAA,MACxBQ,QAAQC,IAAmBF,eAAAA,OAAAA,EAAmBP,kBAAAA,OAAAA,EAA9C,QAGIU,EAAW,SAAY,GAATH,IAAAA,EAAAA,EAAAA,GAClBC,QAAQG,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAMFT,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETZ,EAAgB,CAAES,GAAI,GAAIK,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"makeTransaction.be78a9d2.js","sourceRoot":"../src","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    const canProcess = Math.random() > 0.3;\r\n    transaction.delay = delay;\r\n    \r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (canProcess) {\r\n                resolve(transaction);\r\n            }\r\n                reject(transaction);\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({ id, delay }) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = ({ id }) => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}